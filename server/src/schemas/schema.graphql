# import DateTime, BatchPayload from "../generated/prisma.graphql"

# import UserCreateInput, UserUpdateInput, UserWhereUniqueInput, UserWhereInput, UserOrderByInput, UserSubscriptionPayload from "../generated/prisma.graphql"
# import Role, RoleCreateInput, RoleUpdateInput, RoleWhereUniqueInput, RoleSubscriptionPayload from "../generated/prisma.graphql"

type User {
  id: ID!
  email: String!
  firstname: String!
  lastname: String!
  roles: [Role!]!
}

input UserSignupInput {
  email: String!
  password: String!
  firstname: String!
  lastname: String!
}

input UserProfileInput {
  email: String!
  firstname: String!
  lastname: String!
}

input UserChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

type Query {
  me: User!
  user(id: String!): User!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!
  role(id: String!): Role!
  roles(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Role!]!
}

type Mutation {
  signup(data: UserSignupInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  profile(data: UserProfileInput!): AuthPayload!
  changePassword(data: UserChangePasswordInput!): User!

  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!

  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!  
}

type Subscription {
  userSubscription: UserSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}